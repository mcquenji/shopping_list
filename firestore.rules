rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Allow read access to any document in the database if the user is authenticated
    match /{document=**} {
      allow read: if request.auth != null;
      allow list: if request.auth != null;
    }

    // Allow write access to the "users" collection if the user is authenticated and the user id matches the document id
    match /users/{userId} {
      allow read: if request.auth != null;
      allow list: if true;

      allow write: if request.auth != null && request.auth.uid == userId;

      allow create: if request.auth != null && request.auth.uid == userId && request.resource.id == userId;
    }

    match /referrals/{referralId} {
      allow read: if true;

      // only allow write if the referral code is not used and the user is authenticated and the user is not trying to update any other field
      allow update: if request.auth != null && get(/referrals/$(referralId)).data.referredUser == null && request.resource.data.keys().hasOnly(['referredUser']);

      allow create: if request.auth != null && request.resource.data.creatorId == request.auth.uid && request.resource.id == referralId;
    }

    match /lists/{id} {  
      function isOwnerOrMember(userId) {
        return resource.data.owner == userId || resource.data.members.hasAny([userId]);
      }

      function isMember(userId) {
        return resource.data.members.hasAny([userId]);
      }

      function isLeaving(uid) {
        return request.resource.data.members.size() == resource.data.members.size() - 1 &&
        !request.resource.data.members.hasAll([uid]) &&
        resource.data.members.hasAll([uid]);
      }

      allow read: if request.auth != null && isOwnerOrMember(request.auth.uid);

      allow update: if request.auth != null && (request.auth.uid == resource.data.owner || (request.resource.data.keys().hasOnly(['items']) && isMember(request.auth.uid))) || isLeaving(request.auth.uid);

      allow delete: if request.auth != null && isOwnerOrMember(request.auth.uid);

      allow create: if request.auth != null && request.resource.data.owner == request.auth.uid && request.resource.id == id;
    }
  }
}
